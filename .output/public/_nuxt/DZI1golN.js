import{j as l,ah as f,a6 as d}from"./D9U9Eznd.js";const y="$s";function c(...o){const a=typeof o[o.length-1]=="string"?o.pop():void 0;typeof o[0]!="string"&&o.unshift(a);const[t,e]=o;if(!t||typeof t!="string")throw new TypeError("[nuxt] [useState] key must be a string: "+t);if(e!==void 0&&typeof e!="function")throw new Error("[nuxt] [useState] init must be a function: "+e);const n=y+t,u=l(),i=f(u.payload.state,n);if(i.value===void 0&&e){const r=e();if(d(r))return u.payload.state[n]=r,r;i.value=r}return i}const v=()=>{const o=c("orders",()=>[]),a=c("order",()=>{}),t=c("ordersLoading",()=>!1),e=c("ordersError",()=>null);async function n(){t.value=!0,e.value=null;try{const r=await $fetch("/api/orders");o.value=r.orders||[]}catch(r){e.value=r}finally{t.value=!1}}async function u(r){if(t.value=!0,e.value=null,!r){e.value="Order ID is required";return}try{const s=await $fetch(`/api/orders/${r}`);return a.value=s.order||{},s.order}catch(s){console.error("Error fetching order:",s),a.value={},e.value=s}finally{t.value=!1}}return{orders:o,isLoading:t,error:e,fetchOrders:n,fetchOrderById:u,refreshOrders:async()=>await n()}};export{v as u};
