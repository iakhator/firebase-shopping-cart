name: Pull Request Checks

on:
  pull_request:
    branches: [master, main]
    types: [opened, synchronize, reopened, ready_for_review]

# Prevent concurrent runs on the same PR
concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # Job 1: PR Validation
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate PR title
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "Validating PR title: $PR_TITLE"

          # Check title length (between 10 and 100 characters)
          if [ ${#PR_TITLE} -lt 1 ] || [ ${#PR_TITLE} -gt 100 ]; then
            echo "❌ PR title must be between 10 and 100 characters"
            echo "Current length: ${#PR_TITLE}"
            exit 1
          fi

          # Check for common good practices (flexible)
          if [[ "$PR_TITLE" =~ ^(feat|fix|docs|style|refactor|test|chore|ci|build|perf|add|update|remove|improve): ]] ||
             [[ "$PR_TITLE" =~ ^(feature|bug|doc|tests|performance): ]] ||
             [[ "$PR_TITLE" =~ ^[A-Z] ]] ||
             [[ "$PR_TITLE" =~ (add|fix|update|improve|remove|create|implement|refactor) ]]; then
            echo "✅ PR title looks good: $PR_TITLE"
          else
            echo "⚠️ Consider using a descriptive title that starts with an action verb"
            echo "Examples: 'Add login functionality', 'Fix cart bug', 'Update documentation'"
            echo "Current title: $PR_TITLE"
            echo "This is just a suggestion - PR will still be processed"
          fi

      - name: Check PR description
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"

          if [ -z "$PR_BODY" ] || [ ${#PR_BODY} -lt 10 ]; then
            echo "⚠️ PR description is very short or missing"
            echo "Consider adding a brief description of your changes"
            echo "This helps reviewers understand the context"
            # Don't fail - just warn
          else
            echo "✅ PR description provided"
          fi

      - name: Check for breaking changes
        run: |
          if [[ "${{ github.event.pull_request.title }}" == *"BREAKING CHANGE"* ]] ||
             [[ "${{ github.event.pull_request.body }}" == *"BREAKING CHANGE"* ]]; then
            echo "⚠️ Breaking change detected in PR"
            echo "breaking_change=true" >> $GITHUB_ENV
          fi

  # Job 2: Code Quality Gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Check code formatting
        run: npx prettier --check "**/*.{js,vue,ts,json,md}"

      - name: Check for console logs in production code
        run: |
          echo "🔍 Checking for console statements in production code..."

          # Check only production directories, exclude test files
          console_files=$(grep -r "console\." --include="*.vue" --include="*.js" --include="*.ts" \
            --exclude="*.test.*" --exclude="*.spec.*" --exclude="*test*" \
            components/ pages/ composables/ stores/ utils/ 2>/dev/null || true)

          if [ -n "$console_files" ]; then
            echo "⚠️ Console statements found in production code:"
            echo "$console_files"
            echo ""
            echo "💡 Consider:"
            echo "   • Removing console.log statements from production code"
            echo "   • Using a proper logging library instead"
            echo "   • Moving debug code to development-only sections"
            echo ""
            echo "Note: This is a warning, not a blocking error"
          else
            echo "✅ No console statements found in production code"
          fi

      - name: Check for TODO/FIXME comments
        run: |
          echo "🔍 Checking for TODO/FIXME comments..."

          # Count TODO/FIXME comments in source code
          todo_files=$(grep -r "TODO\|FIXME" --include="*.vue" --include="*.js" --include="*.ts" \
            components/ pages/ composables/ stores/ utils/ 2>/dev/null || true)

          if [ -n "$todo_files" ]; then
            todo_count=$(echo "$todo_files" | wc -l)
            echo "📝 Found $todo_count TODO/FIXME comment(s):"
            echo "$todo_files" | head -10  # Show first 10

            if [ $todo_count -gt 10 ]; then
              echo ""
              echo "⚠️ High number of TODO/FIXME comments found: $todo_count"
              echo "💡 Consider addressing some before merging to keep technical debt low"
            fi
          else
            echo "✅ No TODO/FIXME comments found"
          fi

  # Job 3: Comprehensive Testing
  comprehensive-testing:
    name: Comprehensive Testing
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:run

      - name: Check test coverage threshold
        run: |
          # Add coverage threshold checking here if you have coverage setup
          echo "✅ Test coverage check (placeholder)"

      - name: Test build process
        run: npm run build

      - name: Test in different environments
        run: |
          echo "Testing Node.js compatibility..."
          node --version
          npm --version

  # Job 4: Security and Dependency Checks
  security-checks:
    name: Security Checks
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          echo "🔍 Running npm security audit..."

          # Run audit and capture output
          if npm audit --audit-level=moderate; then
            echo "✅ No moderate+ vulnerabilities found"
          else
            echo "⚠️ Some vulnerabilities detected - checking severity..."
          fi

      - name: Check for vulnerable dependencies
        run: |
          echo "🔍 Checking for high/critical vulnerabilities..."

          # Run audit and save results
          npm audit --json > audit-results.json 2>/dev/null || true

          # Check if audit-results.json exists and has content
          if [ ! -s audit-results.json ]; then
            echo "✅ No vulnerabilities found or audit completed successfully"
            exit 0
          fi

          # Check for high/critical vulnerabilities using node to parse JSON safely
          vulnerabilities=$(node -e "
            try {
              const audit = JSON.parse(require('fs').readFileSync('audit-results.json', 'utf8'));
              const high = audit.metadata?.vulnerabilities?.high || 0;
              const critical = audit.metadata?.vulnerabilities?.critical || 0;
              console.log(high + critical);
            } catch (e) {
              console.log('0');
            }
          ")

          if [ "$vulnerabilities" != "0" ] && [ "$vulnerabilities" -gt 0 ]; then
            echo "⚠️ High/Critical vulnerabilities found: $vulnerabilities"
            echo "📋 Audit summary:"
            npm audit --audit-level=high || true
            echo ""
            echo "💡 Please run 'npm audit fix' to resolve security issues"
            echo "Note: This is a warning - consider fixing before merging"
          else
            echo "✅ No high/critical vulnerabilities found"
          fi

  # Job 5: Performance Impact Check
  performance-check:
    name: Performance Impact
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies (base)
        run: npm ci

      - name: Build base version
        run: npm run build

      - name: Get base bundle size
        run: |
          if [ -d ".output/public/_nuxt" ]; then
            BASE_SIZE=$(du -sb .output/public/_nuxt/ | cut -f1)
            echo "BASE_SIZE=$BASE_SIZE" >> $GITHUB_ENV
          else
            echo "BASE_SIZE=0" >> $GITHUB_ENV
          fi

      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Install dependencies (PR)
        run: npm ci

      - name: Build PR version
        run: npm run build

      - name: Compare bundle sizes
        run: |
          if [ -d ".output/public/_nuxt" ]; then
            PR_SIZE=$(du -sb .output/public/_nuxt/ | cut -f1)
          else
            PR_SIZE=0
          fi

          DIFF=$((PR_SIZE - BASE_SIZE))
          DIFF_PERCENT=$((DIFF * 100 / BASE_SIZE)) 2>/dev/null || DIFF_PERCENT=0

          echo "📦 Bundle Size Comparison:"
          echo "Base: $(numfmt --to=iec $BASE_SIZE)"
          echo "PR: $(numfmt --to=iec $PR_SIZE)"
          echo "Difference: $(numfmt --to=iec $DIFF) ($DIFF_PERCENT%)"

          if [ $DIFF_PERCENT -gt 10 ]; then
            echo "⚠️ Bundle size increased by more than 10%"
          fi

  # Final validation job
  pr-ready-for-merge:
    name: PR Ready for Merge
    runs-on: ubuntu-latest
    needs:
      [pr-validation, quality-gates, comprehensive-testing, security-checks]
    if: always() && github.event.pull_request.draft == false

    steps:
      - name: Check all required checks
        run: |
          if [[ "${{ needs.pr-validation.result }}" == "success" &&
                "${{ needs.quality-gates.result }}" == "success" &&
                "${{ needs.comprehensive-testing.result }}" == "success" &&
                "${{ needs.security-checks.result }}" == "success" ]]; then
            echo "✅ All PR checks passed! Ready for review and merge."
            echo "## ✅ PR Checks Status" >> $GITHUB_STEP_SUMMARY
            echo "All required checks have passed:" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ PR Validation" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Quality Gates" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Comprehensive Testing" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Security Checks" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "This PR is ready for review and can be merged once approved." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some PR checks failed. Please fix before merging."
            echo "## ❌ PR Checks Failed" >> $GITHUB_STEP_SUMMARY
            echo "The following checks need attention:" >> $GITHUB_STEP_SUMMARY
            echo "- PR Validation: ${{ needs.pr-validation.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- Quality Gates: ${{ needs.quality-gates.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- Comprehensive Testing: ${{ needs.comprehensive-testing.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- Security Checks: ${{ needs.security-checks.result }}" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Comment on PR
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ **PR Checks Failed**\n\nSome required checks are failing. Please review the failed jobs and fix the issues before this PR can be merged.\n\nCheck the "Actions" tab for detailed information about the failures.'
            })
