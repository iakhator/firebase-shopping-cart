name: Pull Request Checks

on:
  pull_request:
    branches: [master, main]
    types: [opened, synchronize, reopened, ready_for_review]

# Prevent concurrent runs on the same PR
concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # Job 1: PR Validation
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate PR title
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "Validating PR title: $PR_TITLE"

          # Check title length (between 10 and 100 characters)
          if [ ${#PR_TITLE} -lt 1 ] || [ ${#PR_TITLE} -gt 100 ]; then
            echo "‚ùå PR title must be between 10 and 100 characters"
            echo "Current length: ${#PR_TITLE}"
            exit 1
          fi

          # Check for common good practices (flexible)
          if [[ "$PR_TITLE" =~ ^(feat|fix|docs|style|refactor|test|chore|ci|build|perf|add|update|remove|improve): ]] ||
             [[ "$PR_TITLE" =~ ^(feature|bug|doc|tests|performance): ]] ||
             [[ "$PR_TITLE" =~ ^[A-Z] ]] ||
             [[ "$PR_TITLE" =~ (add|fix|update|improve|remove|create|implement|refactor) ]]; then
            echo "‚úÖ PR title looks good: $PR_TITLE"
          else
            echo "‚ö†Ô∏è Consider using a descriptive title that starts with an action verb"
            echo "Examples: 'Add login functionality', 'Fix cart bug', 'Update documentation'"
            echo "Current title: $PR_TITLE"
            echo "This is just a suggestion - PR will still be processed"
          fi

      - name: Check for breaking changes
        run: |
          if [[ "${{ github.event.pull_request.title }}" == *"BREAKING CHANGE"* ]] ||
             [[ "${{ github.event.pull_request.body }}" == *"BREAKING CHANGE"* ]]; then
            echo "‚ö†Ô∏è Breaking change detected in PR"
            echo "breaking_change=true" >> $GITHUB_ENV
          fi

  # Job 2: Code Quality Gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Check code formatting
        run: npx prettier --check "**/*.{js,vue,ts,json,md}"

      - name: Check for console logs in production code
        run: |
          echo "üîç Checking for console statements in production code..."

          # Check only production directories, exclude test files
          console_files=$(grep -r "console\." --include="*.vue" --include="*.js" --include="*.ts" \
            --exclude="*.test.*" --exclude="*.spec.*" --exclude="*test*" \
            components/ pages/ composables/ stores/ utils/ 2>/dev/null || true)

          if [ -n "$console_files" ]; then
            echo "‚ö†Ô∏è Console statements found in production code:"
            echo "$console_files"
            echo ""
            echo "üí° Consider:"
            echo "   ‚Ä¢ Removing console.log statements from production code"
            echo "   ‚Ä¢ Using a proper logging library instead"
            echo "   ‚Ä¢ Moving debug code to development-only sections"
            echo ""
            echo "Note: This is a warning, not a blocking error"
          else
            echo "‚úÖ No console statements found in production code"
          fi

      - name: Check for TODO/FIXME comments
        run: |
          echo "üîç Checking for TODO/FIXME comments..."

          # Count TODO/FIXME comments in source code
          todo_files=$(grep -r "TODO\|FIXME" --include="*.vue" --include="*.js" --include="*.ts" \
            components/ pages/ composables/ stores/ utils/ 2>/dev/null || true)

          if [ -n "$todo_files" ]; then
            todo_count=$(echo "$todo_files" | wc -l)
            echo "üìù Found $todo_count TODO/FIXME comment(s):"
            echo "$todo_files" | head -10  # Show first 10

            if [ $todo_count -gt 10 ]; then
              echo ""
              echo "‚ö†Ô∏è High number of TODO/FIXME comments found: $todo_count"
              echo "üí° Consider addressing some before merging to keep technical debt low"
            fi
          else
            echo "‚úÖ No TODO/FIXME comments found"
          fi

  # Job 3: Comprehensive Testing
  comprehensive-testing:
    name: Comprehensive Testing
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set CI environment variable
        run: echo "CI=true" >> $GITHUB_ENV

      - name: Run unit tests with coverage
        run: npm run test:run
        env:
          NODE_ENV: test
          CI: true

      - name: Check test coverage threshold
        run: |
          # Add coverage threshold checking here if you have coverage setup
          echo "‚úÖ Test coverage check (placeholder)"

      - name: Generate Nuxt types before build
        run: |
          echo "üîß Generating Nuxt types and configuration..."
          npx nuxi prepare || echo "‚ö†Ô∏è Nuxt prepare failed, continuing..."

      - name: Test build process
        run: |
          echo "üèóÔ∏è Testing build process..."
          npm run build
        env:
          NODE_ENV: production

      - name: Check TypeScript compilation (if applicable)
        run: |
          echo "üîç Checking TypeScript compilation..."
          if [ -f "tsconfig.json" ]; then
            if [ -f ".nuxt/tsconfig.json" ]; then
              echo "‚úÖ Nuxt TypeScript config found"
              npx tsc --noEmit || echo "‚ö†Ô∏è TypeScript check found issues"
            else
              echo "‚ö†Ô∏è .nuxt/tsconfig.json not found, running nuxt prepare first..."
              npx nuxi prepare
              npx tsc --noEmit || echo "‚ö†Ô∏è TypeScript check found issues"
            fi
          else
            echo "‚ÑπÔ∏è No tsconfig.json found, skipping TypeScript check"
          fi
        continue-on-error: true

      - name: Test in different environments
        run: |
          echo "üß™ Testing Node.js compatibility..."
          echo "Node.js version: $(node --version)"
          echo "npm version: $(npm --version)"

          # Check if build output exists
          if [ -d ".output" ]; then
            echo "‚úÖ Build output directory found"
            echo "Build size: $(du -sh .output 2>/dev/null || echo 'Unable to calculate')"
          else
            echo "‚ö†Ô∏è No build output found"
          fi
  # Final validation job
  pr-ready-for-merge:
    name: PR Ready for Merge
    runs-on: ubuntu-latest
    needs:
      [pr-validation, quality-gates, comprehensive-testing, security-checks]
    if: always() && github.event.pull_request.draft == false

    steps:
      - name: Check all required checks
        run: |
          if [[ "${{ needs.pr-validation.result }}" == "success" &&
                "${{ needs.quality-gates.result }}" == "success" &&
                "${{ needs.comprehensive-testing.result }}" == "success" &&
                "${{ needs.security-checks.result }}" == "success" ]]; then
            echo "‚úÖ All PR checks passed! Ready for review and merge."
            echo "## ‚úÖ PR Checks Status" >> $GITHUB_STEP_SUMMARY
            echo "All required checks have passed:" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ PR Validation" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Quality Gates" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Comprehensive Testing" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "This PR is ready for review and can be merged once approved." >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Some PR checks failed. Please fix before merging."
            echo "## ‚ùå PR Checks Failed" >> $GITHUB_STEP_SUMMARY
            echo "The following checks need attention:" >> $GITHUB_STEP_SUMMARY
            echo "- PR Validation: ${{ needs.pr-validation.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- Quality Gates: ${{ needs.quality-gates.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- Comprehensive Testing: ${{ needs.comprehensive-testing.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- Security Checks: ${{ needs.security-checks.result }}" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Comment on PR
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚ùå **PR Checks Failed**\n\nSome required checks are failing. Please review the failed jobs and fix the issues before this PR can be merged.\n\nCheck the "Actions" tab for detailed information about the failures.'
            })
